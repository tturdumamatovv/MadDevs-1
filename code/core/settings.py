"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from decouple import config  # Импортируем библиотеку для работы с переменными окружения
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent  # Определяем базовую директорию проекта

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')  # Секретный ключ для Django

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)  # Режим отладки

ALLOWED_HOSTS = config('ALLOWED_HOSTS').split(' ')  # Разрешенные хосты

# Application definition
PROJECT_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

DJANGO_APPS = [
    'patients.apps.PatientsConfig',  # Подключаем приложение patients
]

THIRD_PARTY_APPS = [
    'rest_framework',  # Django REST Framework
    'drf_spectacular',  # Генерация OpenAPI схем
    'rest_framework_simplejwt',  # JWT аутентификация
]

INSTALLED_APPS = [*DJANGO_APPS, *THIRD_PARTY_APPS, *PROJECT_APPS]  # Объединяем все приложения

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SITE_ID = config('SITE_ID', cast=int)  # ID сайта для Django

ROOT_URLCONF = 'core.urls'  # Основной файл маршрутизации

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Папка с шаблонами
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'  # WSGI приложение

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Драйвер PostgreSQL
        'NAME': config('DB_NAME'),  # Имя базы данных
        'USER': config('DB_USER'),  # Пользователь базы данных
        'PASSWORD': config('DB_PASSWORD'),  # Пароль пользователя
        'HOST': config('DB_HOST'),  # Хост базы данных
        'PORT': config('DB_PORT', cast=int),  # Порт базы данных
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'  # Язык
TIME_ZONE = 'UTC'  # Часовой пояс
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'  # URL для статических файлов
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Папка для статических файлов

MEDIA_URL = '/media/'  # URL для медиафайлов
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Папка для медиафайлов

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Тип поля для первичного ключа

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # Класс схемы по умолчанию
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT аутентификация
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Доступ только для аутентифицированных пользователей
    ],
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # Время жизни access токена
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Время жизни refresh токена
    'ROTATE_REFRESH_TOKENS': True,  # Включаем ротацию refresh токенов
}

# Custom user model
AUTH_USER_MODEL = 'patients.User'  # Указываем кастомную модель пользователя

# Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Patients API',  # Заголовок API
    'DESCRIPTION': 'API для управления пациентами',  # Описание API
    'VERSION': '1.0.0',  # Версия API
    'SERVE_INCLUDE_SCHEMA': False,  # Не включаем схему в документацию
}

# Migration files location
MIGRATION_MODULES = {
    'patients': 'migrations.patients',  # Указываем путь для миграций приложения patients
    'admin': 'migrations.admin',  # Для встроенных приложений тоже можно указать
    'auth': 'migrations.auth',
    'contenttypes': 'migrations.contenttypes',
    'sessions': 'migrations.sessions',
}

# Добавляем корень проекта в Python path, чтобы можно было импортировать пакет migrations
sys.path.append(str(BASE_DIR))  # Добавляем базовую директорию в PYTHONPATH