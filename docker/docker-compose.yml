version: '3.8'  # Указываем версию Docker Compose

services:  # Определяем сервисы, которые будут запущены

  web:  # Сервис для веб-приложения
    build:  # Конфигурация сборки образа
      context: ..  # Указываем контекст сборки (родительская директория)
      dockerfile: docker/Dockerfile  # Указываем путь к Dockerfile
    ports:  # Настройка портов
      - "8000:8000"  # Пробрасываем порт 8000 контейнера на порт 8000 хоста
    volumes:  # Настройка томов
      - ..:/app  # Монтируем родительскую директорию в /app контейнера
    depends_on:  # Зависимости между сервисами
      - db  # Указываем, что сервис web зависит от сервиса db
    environment:  # Переменные окружения для веб-сервиса
      - POSTGRES_DB=${DB_NAME}  # Имя базы данных
      - POSTGRES_USER=${DB_USER}  # Имя пользователя базы данных
      - POSTGRES_PASSWORD=${DB_PASSWORD}  # Пароль пользователя базы данных
      - POSTGRES_HOST=db  # Хост базы данных
      - POSTGRES_PORT=${DB_PORT}  # Порт базы данных
      - DEBUG=${DEBUG}  # Режим отладки
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}  # Разрешенные хосты
      - SECRET_KEY=${SECRET_KEY}  # Секретный ключ для Django
      - SITE_ID=${SITE_ID}  # Идентификатор сайта

  db:  # Сервис для базы данных
    image: postgres:13  # Используем образ PostgreSQL версии 13
    volumes:  # Настройка томов для базы данных
      - postgres_data:/var/lib/postgresql/data  # Монтируем том для хранения данных
    environment:  # Переменные окружения для сервиса базы данных
      - POSTGRES_DB=${DB_NAME}  # Имя базы данных
      - POSTGRES_USER=${DB_USER}  # Имя пользователя базы данных
      - POSTGRES_PASSWORD=${DB_PASSWORD}  # Пароль пользователя базы данных
    ports:  # Настройка портов для базы данных
      - "5434:5432"  # Пробрасываем порт 5432 контейнера на порт 5434 хоста

volumes:  # Определяем тома
  postgres_data:  # Том для хранения данных PostgreSQL